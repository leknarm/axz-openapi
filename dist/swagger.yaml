openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'Amaze x ZORT Adapter API'
  description: The Amaze x ZORT Adapter API serves as a middleware to synchronize data between Amaze (a marketplace platform) and ZORT (an order and inventory management system). 

servers:
  - url: https://api.example.com/api/v1
    description: Example server

paths:
  /connect/zort:
    post:
      summary: Connect to ZORT
      description: Establishes a connection between a shop and ZORT using provided API credentials.
      tags:
        - Authentication
      parameters:
        - in: header
          name: x-shop-id
          required: true
          schema:
            type: string
          description: Unique identifier for the shop requesting the connection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZortConnectRequest'
      responses:
        '200':
          description: Adapter processed the request. Check `code` in response body for actual outcome, including connection issues with ZORT.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZortConnectResponse'
              examples:
                success:
                  summary: Successful connection to ZORT
                  value:
                    code: "2000"
                    message: "Success"
                unauthorized:
                  summary: Invalid credentials for ZORT
                  value:
                    code: "4001"
                    message: "Unauthorized"
                timeout:
                  summary: Timeout when calling ZORT
                  value:
                    code: "5001"
                    message: "Timeout"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /product/sync:
    post:
      summary: Sync product data
      description: |
        Synchronizes product data. If fullsync is true, performs full synchronization.
        Returns status of sync operation in the response body.
      tags:
        - Product
      parameters:
      - in: header
        name: x-shop-id
        required: true
        schema:
          type: string
        description: Unique identifier for the shop requesting the product sync
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSyncRequest'
            examples:
              individual:
                summary: Sync individual products
                value:
                  sync: individual
                  product_ids:
                    - "8823618273622"
              full:
                summary: Full sync (all products)
                value:
                  sync: full
                  product_ids: []
      responses:
        '200':
          description: Sync processed successfully. Check `code` and `data` for results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSyncResponse'
              examples:
                success:
                  summary: Successful product sync
                  value:
                    code: "2000"
                    message: "Success"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /stock/update:
    post:
      summary: Update product stock
      description: Updates the stock and available stock for a product by SKU.
      tags:
        - Stock
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockUpdateRequest'
            examples:
              update:
                summary: Update stock for a product
                value:
                  id: 1234
                  sku: "P0001"
                  name: "Product1"
                  stock: "20.00"
                  availablestock: "10.00"
      responses:
        '200':
          description: Stock updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockUpdateResponse'
              examples:
                success:
                  summary: Successful stock update
                  value:
                    code: "0000"
                    message: "Success"
                    data:
                      sku: "P0001"
                      stock: 20
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /order:
    post:
      summary: Get order number by order ID
      description: Returns the order number for a given order ID.
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
            examples:
              example:
                summary: Example order request
                value:
                  order_id: "362cff97-ccc3-4e2d-a2d2-0b4dad537dac"
      responses:
        '200':
          description: Order number found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
              examples:
                success:
                  summary: Successful order lookup
                  value:
                    code: "0000"
                    message: "Success"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      summary: Update order status
      description: Updates the status of an order by order ID.
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdateRequest'
            examples:
              example:
                summary: Example order status update
                value:
                  order_id: "362cff97-ccc3-4e2d-a2d2-0b4dad537dac"
                  status: "ready_to_ship"
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
              examples:
                success:
                  summary: Successful order status update
                  value:
                    code: "0000"
                    message: "Success"
                    data:
                      order_number: "zz-ord-00001"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  schemas:
    ZortConnectRequest:
      type: object
      required:
        - storename
        - apikey
        - apisecret
      properties:
        storename:
          type: string
          example: MyZortStore
        apikey:
          type: string
          example: abc123xyz
        apisecret:
          type: string
          example: secret456def

    ZortConnectResponse:
      type: object
      properties:
        code:
          type: string
          description: Internal response code
          enum: [2000, 4001, 5001]
          example: "2000"
        message:
          type: string
          description: Message describing the result
          example: Success

    ProductSyncRequest:
      type: object
      required:
        - sync
        - product_ids
      properties:
        sync:
          type: string
          description: Sync mode (either 'full' or 'individual')
          enum: [full, individual]
          example: individual
        product_ids:
          type: array
          description: List of product IDs to sync
          items:
            type: string
          example:
            - "8823618273622"

    ProductSyncResponse:
      type: object
      properties:
        code:
          type: string
          description: Internal response code
          example: "2000"
        message:
          type: string
          description: Message describing the sync result
          example: Success

    StockUpdateRequest:
      type: object
      required:
        - id
        - sku
        - name
        - stock
        - availablestock
      properties:
        id:
          type: integer
          example: 1234
        sku:
          type: string
          example: P0001
        name:
          type: string
          example: Product1
        stock:
          type: string
          example: "20.00"
        availablestock:
          type: string
          example: "10.00"

    StockUpdateResponse:
      type: object
      properties:
        code:
          type: string
          example: "0000"
        message:
          type: string
          example: Success
        data:
          type: object
          properties:
            sku:
              type: string
              example: P0001
            stock:
              type: integer
              example: 20

    OrderRequest:
      type: object
      required:
        - order_id
      properties:
        order_id:
          type: string
          example: 362cff97-ccc3-4e2d-a2d2-0b4dad537dac

    OrderUpdateRequest:
      type: object
      required:
        - order_id
        - status
      properties:
        order_id:
          type: string
          example: 362cff97-ccc3-4e2d-a2d2-0b4dad537dac
        status:
          type: string
          example: ready_to_ship

    OrderResponse:
      type: object
      properties:
        code:
          type: string
          example: "0000"
        message:
          type: string
          example: Success

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

  responses:
    BadRequest:
      description: Bad Request - client sent invalid data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            badrequest:
              summary: Bad Request
              value:
                code: "4000"
                message: "Bad Request"

    InternalError:
      description: Internal Server Error - unexpected failure
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            unknownerror:
              summary: Unknown Error
              value:
                code: "5000"
                message: "Unknown Error"


